require 'wbtforest'
require 'nester'

-- Customize nester configuration.
nester.stop_on_fail = false

nester.describe('wbtforest', function()
  nester.before(function(name: string)
    -- This function is run before every test.
  end)

  nester.describe('wbtforest funs', function() -- Describe blocks can be nested.
    nester.it('instanciating', function()
      local forest: wbtforest(integer, integer)
      expect.equal(#forest, 0) -- creates doubly linked list
      expect.equal(#forest, 0) -- uses doubly linked list
    end)

    nester.it('insert & get', function()
      local forest: wbtforest(integer, integer)
      expect.equal(#forest, 0)
      local wbt1 = forest:makewbtmap() -- : wbtmapT
      expect.equal(#forest, 1)
      local wbt2 = forest:makewbtmap() -- : wbtmapT
      expect.equal(#forest, 2)
      local wbt3 = wbt2:insert(42,-42)
      expect.equal(wbt3:getordefault(42,-999), -42)
      expect.equal(wbt3:getordefault(41,-999), -999)
      expect.equal(wbt2:getordefault(42,-999), -999)
    end)

    nester.it('grow', function()
      local forest: wbtforest(integer, integer)
      --PRINTF!("About to make\n")
      local wbt1 = forest:makewbtmap() -- : wbtmapT
      --PRINTF!("About to loop\n")
      for i = 1, 240 do
        local wbt2 = wbt1:insert(i,-i)
        --wbt1 = wbt1:insert(i,-i)
        --PRINTF!("%d: %s\n", i, wbt1:treetostring())
        --PRINTF!("forest len %d i %d\n", #forest, i)
        --PRINTF!("i %d wbt2 siz %d\n", i, #wbt2)
        wbt1, wbt2 = wbt2, wbt1
        wbt2:destroy()
        expect.equal(#forest, 1)
        --PRINTF!("i %d wbt1 siz %d\n", i, #wbt1)
        expect.equal(#wbt1, i)
      end
      expect.equal(wbt1:getordefault(42,-999), -42)
      expect.equal(wbt1:getordefault(222,-999), -222)
      --PRINTF!("%s\n", wbt1:treetostring())
      --PRINTF!("gcwip size: %d\n", #forest.gcwip)
      --PRINTF!("240 inserts; sizes... nodes: %d marks %d gcwip: %d\n"
      --          , #forest.nodes, #forest.marks, #forest.gcwip)
      --for k,v in pairs(wbt1) do PRINTF!("k: %d v: %d\n", k, v) end
    end)

    nester.it('pairs', function()
      local forest: wbtforest(integer, integer)
      local wbt1 = forest:makewbtmap() -- : wbtmapT
      for i = 1, 1000 do
        local wbt2 = wbt1:insert(i,-i)
        wbt1, wbt2 = wbt2, wbt1
        wbt2:destroy()
      end
      expect.equal(#wbt1, 1000)
      local i = 1
      for k,v in pairs(wbt1) do
        expect.equal(k, i)
        expect.equal(v, -i)
        i = i + 1
      end
    end)


  end)
end)

nester.report() -- Print overall statistic of the tests run.
nester.exit() -- Exit with success if all tests passed.


  --[[
  assert(map:find_(0)==nilptr)
  local p: *integer = map:insert_(42)
  assert(p ~= nilptr)
  $p = -42
  p = map:find_(42)
  assert(p ~= nilptr)
  assert($p == -42)
  ##if WBTMAP_UNITTEST then
    assert(map:isbalanced())
    io.printf("Balanced!\n")
  ##end
  map:destroy()
  ]]

